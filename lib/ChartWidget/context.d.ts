/// <reference types="svelte" />
import type { CachePolicy } from 'san-webkit/lib/api/cache';
import type { MetricSettings } from './../ChartWidget/MetricSettings/context';
import type { MetricIndicators } from './../ChartWidget/MetricSettings/IndicatorSetting/context';
import { newChartDrawerStore } from './../Chart/Drawer/context';
import { newChartAxesStore } from './../Chart/Axes/context';
import { newChartColorsStore } from './../Chart/colors/context';
import { newChartOptionsStore } from './../ChartWidget/Controls/context';
import { newMetricsStore, newHiddenMetricsStore } from './../ChartWidget/Metrics/context';
import { newMetricSettingsStore } from './../ChartWidget/MetricSettings/context';
import { newMetricIndicatorsStore } from './../ChartWidget/MetricSettings/IndicatorSetting/context';
export declare type ChartWidget = {
    ChartAxes: ReturnType<typeof newChartAxesStore>;
    ChartDrawer: ReturnType<typeof newChartDrawerStore>;
    ChartColors: ReturnType<typeof newChartColorsStore>;
    ChartOptions: ReturnType<typeof newChartOptionsStore>;
    Metrics: ReturnType<typeof newMetricsStore>;
    HiddenMetrics: ReturnType<typeof newHiddenMetricsStore>;
    MetricSettings: ReturnType<typeof newMetricSettingsStore>;
    MetricIndicators: ReturnType<typeof newMetricIndicatorsStore>;
    axesMetrics?: Set<Studio.Metric>;
    disabledAxesMetrics?: Set<Studio.Metric>;
    drawings?: SAN.Charts.Drawing[];
    metricSettings?: MetricSettings;
    metricIndicators?: MetricIndicators;
    chart: any;
    defferedCachePolicy?: CachePolicy;
};
export declare const setWidget: (widget: ChartWidget) => ChartWidget;
export declare const getWidget: () => ChartWidget;
export declare function initWidget(widget: any): void;
export declare function newOnUpdateStore(widget: any): {
    subscribe: (this: void, run: import("svelte/store").Subscriber<number>, invalidate?: import("svelte/store").Invalidator<number> | undefined) => import("svelte/store").Unsubscriber;
    emit(): void;
};
export declare function initWidgetContext(widget: any): void;
export declare const setOnLoadContext: (onLoad: any) => void;
export declare const getOnLoadContext: () => any;
export declare const dispatchWidgetDataLoaded: (widget: any) => boolean;
export declare const subscribeWidgetDataLoadedEvent: (clb: any) => () => void;
